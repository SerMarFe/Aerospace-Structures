clear; clc; close all;
addpath('functions\')

g = 9.81; % [m/s^2]
% Datos geométricos
chi_s = 1.1358; % [m] shear center (copiado del MAIN_A)
t1 = 22e-3;
t2 = 15e-3;
t3 = 3.5e-3;
b = 16; % [m]
be = 0.25*b; % [m]
c = 2; % [m]
ze = 0.3*c; % [m]
za = 0.25*c; % [m]
zm = 0.48*c; % [m]
Me = 2100; % [kg]
weight_distribution = 140*g; % [N/m]

vinf = 750/3.6; % [m/s]
rho = 1.225; % [kg/m^3]
Cl = 0.1;
lift_func = @(x)0.5*rho*vinf^2*c*Cl*sqrt(1-(x/b)^2);

% Geometría y propiedades
dx = b/4;
x = 0:dx:b;
data.nel = numel(x)-1;
Tn = zeros(data.nel,2);
for e=1:data.nel
    Tn(e,:) = [e, e+1];
end

% Datos del material
E = 210e9;
G = 80e9;
I = 4.3678e-04; % [m^4] 
m = [E G I J]
Tm = [];

% Fuerza equivalente resultante en cada elemento
lift_nodes = arrayfun(lift_func,x);
lift = dx*(lift_nodes(1:end-1) + lift_nodes(2:end))/2;
distributed_load = lift - weight_distribution*dx;
motor_node_position = find(x==4);
motor_element_position = [motor_node_position-1, motor_node_position];
distributed_load(motor_element_position) = distributed_load(motor_element_position) - Me*g/2;

% Momento torsor equivalente resultante en cada elemento
mt_lift = (chi_s-za)*dx*(lift_nodes(1:end-1) + lift_nodes(2:end))/2;
mt_distributed_load = mt_lift - (chi_s-zm)*weight_distribution*dx;
motor_node_position = find(x==4);
motor_element_position = [motor_node_position-1, motor_node_position];
mt_distributed_load(motor_element_position) = mt_distributed_load(motor_element_position) - (chi_s-ze)*Me*g/2;

%% B) Beam analysis (opened)
getElementStiffness(1,x,Tn,m,Tm)
